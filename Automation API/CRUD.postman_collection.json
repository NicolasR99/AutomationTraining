{
	"info": {
		"_postman_id": "9a8cd483-3dd7-4997-b9fc-f0beb812b4ee",
		"name": "CRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37149146"
	},
	"item": [
		{
			"name": "Get Objects",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}?id=3&id=5&id=10",
					"host": [
						"{{baseUrl}}"
					],
					"query": [
						{
							"key": "id",
							"value": "3"
						},
						{
							"key": "id",
							"value": "5"
						},
						{
							"key": "id",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Single Object",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to validate the response status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to verify the details of the object with ID \"7\"\r",
							"pm.test(\"Response contains the object with ID {{ObjectId}}\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    // Expected values\r",
							"    var expectedName = \"Apple MacBook Pro 16\";\r",
							"    var expectedYear = 2019;\r",
							"    var expectedPrice = 1849.99;\r",
							"    var expectedCPUModel = \"Intel Core i9\";\r",
							"    var expectedHardDiskSize = \"1 TB\";\r",
							"    \r",
							"    // Validate the object properties\r",
							"    pm.expect(jsonData.id).to.eql(\"7\"); // Replace with the actual ObjectId if not dynamic\r",
							"    pm.expect(jsonData.name).to.eql(expectedName);\r",
							"    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
							"    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
							"    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
							"    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post an Object",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to validate the response status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to verify that the response contains the expected properties for the newly created object\r",
							"pm.test(\"Response contains the correct object properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Expected values\r",
							"    var expectedName = \"Apple example\";\r",
							"    var expectedYear = 2019;\r",
							"    var expectedPrice = 1849.99;\r",
							"    var expectedCPUModel = \"Intel Core i9\";\r",
							"    var expectedHardDiskSize = \"1 TB\";\r",
							"\r",
							"    // Validate the main properties in the response\r",
							"    pm.expect(jsonData.name).to.eql(expectedName);\r",
							"    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
							"    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
							"    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
							"    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
							"});\r",
							"\r",
							"// Test to verify that the response contains additional properties like autogenerated ID and createdAt timestamp\r",
							"pm.test(\"Response contains autogenerated ID and timestamp\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Validate that an ID and createdAt timestamp are present\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('createdAt');\r",
							"\r",
							"    // Save the ID to an environment variable\r",
							"    pm.environment.set(\"objectId\", jsonData.id);\r",
							"\r",
							"    // Ensure the ID is not null or empty (Autogenerated)\r",
							"    pm.expect(jsonData.id).to.not.be.null;\r",
							"    pm.expect(jsonData.id).to.not.be.empty;\r",
							"\r",
							"    // Ensure the createdAt is a valid timestamp (regex for basic timestamp validation)\r",
							"    var timestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
							"    pm.expect(jsonData.createdAt).to.match(timestampRegex);\r",
							"});\r",
							"\r",
							"// Test to ensure that the response does not contain any errors\r",
							"pm.test(\"Response does not contain errors\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.have.property('errors');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Apple example\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 1849.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\"\r\n   }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Single Object Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to validate the response status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to verify that the response contains the correct object properties\r",
							"pm.test(\"Response contains the correct object properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Expected values (match the POST request body)\r",
							"    var expectedName = \"Apple example\";\r",
							"    var expectedYear = 2019;\r",
							"    var expectedPrice = 1849.99;\r",
							"    var expectedCPUModel = \"Intel Core i9\";\r",
							"    var expectedHardDiskSize = \"1 TB\";\r",
							"\r",
							"    // Validate the object properties\r",
							"    pm.expect(jsonData.name).to.eql(expectedName);\r",
							"    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
							"    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
							"    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
							"    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
							"});\r",
							"\r",
							"// Test to ensure the ID matches the created object\r",
							"pm.test(\"The retrieved object ID matches the saved objectId\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var objectId = pm.environment.get(\"objectId\");\r",
							"\r",
							"    pm.expect(jsonData.id).to.eql(objectId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{objectId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{objectId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"Apple MacBook Pro 16\",\r\n   \"data\": {\r\n      \"year\": 2010,\r\n      \"price\": 2049.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\",\r\n      \"color\": \"silver\"\r\n   }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.restful-api.dev/objects/ff80818191fb642f0191fb932be5013d",
					"protocol": "https",
					"host": [
						"api",
						"restful-api",
						"dev"
					],
					"path": [
						"objects",
						"ff80818191fb642f0191fb932be5013d"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request Copy",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"name\": \"{{$randomProductName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.restful-api.dev/objects/ff80818191fb642f0191fb932be5013d",
					"protocol": "https",
					"host": [
						"api",
						"restful-api",
						"dev"
					],
					"path": [
						"objects",
						"ff80818191fb642f0191fb932be5013d"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request Copy",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.restful-api.dev/objects/ff80818191fb642f0191fb932be5013d",
					"protocol": "https",
					"host": [
						"api",
						"restful-api",
						"dev"
					],
					"path": [
						"objects",
						"ff80818191fb642f0191fb932be5013d"
					]
				}
			},
			"response": []
		}
	]
}