{
  "collection": {
    "_": {
      "postman_id": "9a8cd483-3dd7-4997-b9fc-f0beb812b4ee",
      "exporter_id": "37149146"
    },
    "item": [
      {
        "id": "f4ab5d9a-56ab-4ba3-b690-ce39a18b03f3",
        "name": "Get Objects",
        "request": {
          "url": {
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "id",
                "value": "3"
              },
              {
                "key": "id",
                "value": "5"
              },
              {
                "key": "id",
                "value": "10"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "077ada4d-6d27-4e65-949c-03e58ef25f74",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test to validate the response status code\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test to ensure the response contains exactly 3 objects\r",
                "pm.test(\"Response contains exactly 3 objects\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    pm.expect(jsonData.length).to.eql(3);\r",
                "});\r",
                "\r",
                "// Test to verify the details of object with ID 3\r",
                "pm.test(\"Object with ID 3 has correct details\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    var object = jsonData.find(obj => obj.id === \"3\");\r",
                "    \r",
                "    pm.expect(object.name).to.eql(\"Apple iPhone 12 Pro Max\");\r",
                "    pm.expect(object.data.color).to.eql(\"Cloudy White\");\r",
                "    pm.expect(object.data[\"capacity GB\"]).to.eql(512);\r",
                "});\r",
                "\r",
                "// Test to verify the details of object with ID 5\r",
                "pm.test(\"Object with ID 5 has correct details\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    var object = jsonData.find(obj => obj.id === \"5\");\r",
                "    \r",
                "    pm.expect(object.name).to.eql(\"Samsung Galaxy Z Fold2\");\r",
                "    pm.expect(object.data.color).to.eql(\"Brown\");\r",
                "    pm.expect(object.data.price).to.eql(689.99);\r",
                "});\r",
                "\r",
                "// Test to verify the details of object with ID 10\r",
                "pm.test(\"Object with ID 10 has correct details\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    var object = jsonData.find(obj => obj.id === \"10\");\r",
                "    \r",
                "    pm.expect(object.name).to.eql(\"Apple iPad Mini 5th Gen\");\r",
                "    pm.expect(object.data.Capacity).to.eql(\"64 GB\");\r",
                "    pm.expect(object.data[\"Screen size\"]).to.eql(7.9);\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "f560a6bf-ae76-4b9c-9725-727ffff41f3b"
            }
          }
        ]
      },
      {
        "id": "99dfe5f3-3887-41c7-ada0-ff9cb52d121d",
        "name": "Get a Single Object",
        "request": {
          "url": {
            "path": [
              "7"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6986f8e-1d22-41b3-8ac3-18e1f0bba674",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "047f73b0-9d36-40b5-904f-f717b87dc1ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccf391a0-4637-4836-a4e5-29fd5441c744",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test to validate the response status code\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test to verify the details of the object with ID \"7\"\r",
                "pm.test(\"Response contains the object with ID {{ObjectId}}\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    \r",
                "    // Expected values\r",
                "    var expectedName = \"Apple MacBook Pro 16\";\r",
                "    var expectedYear = 2019;\r",
                "    var expectedPrice = 1849.99;\r",
                "    var expectedCPUModel = \"Intel Core i9\";\r",
                "    var expectedHardDiskSize = \"1 TB\";\r",
                "    \r",
                "    // Validate the object properties\r",
                "    pm.expect(jsonData.id).to.eql(\"7\"); // Replace with the actual ObjectId if not dynamic\r",
                "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "7f08e977-e2cf-435c-80be-23d8da4c374a"
            }
          }
        ]
      },
      {
        "id": "0daf4923-42cf-4d5b-b55f-13ff8db779ac",
        "name": "Post an Object",
        "request": {
          "url": {
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n   \"name\": \"Apple example\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 1849.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\"\r\n   }\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3cf8b5e7-5f28-4767-9b78-2a9025dbf8b3",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test to validate the response status code\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test to verify that the response contains the expected properties for the newly created object\r",
                "pm.test(\"Response contains the correct object properties\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Expected values\r",
                "    var expectedName = \"Apple example\";\r",
                "    var expectedYear = 2019;\r",
                "    var expectedPrice = 1849.99;\r",
                "    var expectedCPUModel = \"Intel Core i9\";\r",
                "    var expectedHardDiskSize = \"1 TB\";\r",
                "\r",
                "    // Validate the main properties in the response\r",
                "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                "});\r",
                "\r",
                "// Test to verify that the response contains additional properties like autogenerated ID and createdAt timestamp\r",
                "pm.test(\"Response contains autogenerated ID and timestamp\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Validate that an ID and createdAt timestamp are present\r",
                "    pm.expect(jsonData).to.have.property('id');\r",
                "    pm.expect(jsonData).to.have.property('createdAt');\r",
                "\r",
                "    // Save the ID to an environment variable\r",
                "    pm.environment.set(\"objectId\", jsonData.id);\r",
                "\r",
                "    // Ensure the ID is not null or empty (Autogenerated)\r",
                "    pm.expect(jsonData.id).to.not.be.null;\r",
                "    pm.expect(jsonData.id).to.not.be.empty;\r",
                "});\r",
                "\r",
                "// Test to ensure that the response does not contain any errors\r",
                "pm.test(\"Response does not contain errors\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    pm.expect(jsonData).to.not.have.property('errors');\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "1bd0dd7e-d0d2-4cc7-aa0d-86f5dcf94c0c"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "c22a9b4e-a412-4895-a300-e5a5a713e2a4",
              "type": "text/javascript",
              "packages": {},
              "_lastExecutionId": "a9bfdfe5-fee0-405b-aa8a-c1e2c68f3084"
            }
          }
        ]
      },
      {
        "id": "f1e1718b-137a-46fe-a495-5d396216c5cc",
        "name": "Get a Single Object Copy",
        "request": {
          "url": {
            "path": [
              "{{objectId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d154df45-f07e-466d-b4a0-53d5fdf46909",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "a99bdc7e-87ce-478f-9508-4c12b99b2e07"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed3ba61e-3d45-4445-8532-8d52ff776c4a",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test to validate the response status code\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test to verify that the response contains the correct object properties\r",
                "pm.test(\"Response contains the correct object properties\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Expected values (match the POST request body)\r",
                "    var expectedName = \"Apple example\";\r",
                "    var expectedYear = 2019;\r",
                "    var expectedPrice = 1849.99;\r",
                "    var expectedCPUModel = \"Intel Core i9\";\r",
                "    var expectedHardDiskSize = \"1 TB\";\r",
                "\r",
                "    // Validate the object properties\r",
                "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                "});\r",
                "\r",
                "// Test to ensure the ID matches the created object\r",
                "pm.test(\"The retrieved object ID matches the saved objectId\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    var objectId = pm.environment.get(\"objectId\");\r",
                "\r",
                "    pm.expect(jsonData.id).to.eql(objectId);\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "4fd40324-ca35-4a6d-8e5d-49bee6988309"
            }
          }
        ]
      },
      {
        "id": "252867f8-77e8-4238-81dd-bb9f0d91d898",
        "name": "Put of an Object",
        "request": {
          "url": {
            "path": [
              "{{objectId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n   \"name\": \"Apple example put\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 2049.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\",\r\n      \"color\": \"silver\"\r\n   }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d560198f-bde1-472f-871f-da1ef1b637ae",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Get the object ID from the environment variable\r",
                "var expectedId = pm.environment.get(\"objectId\");\r",
                "\r",
                "// Test to validate the response status code is 200\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test to verify that the response contains the correct object properties after the update\r",
                "pm.test(\"Response contains the correct updated object properties\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Expected updated values\r",
                "    var expectedName = \"Apple example put\";\r",
                "    var expectedYear = 2019;\r",
                "    var expectedPrice = 2049.99;\r",
                "    var expectedCPUModel = \"Intel Core i9\";\r",
                "    var expectedHardDiskSize = \"1 TB\";\r",
                "    var expectedColor = \"silver\";\r",
                "\r",
                "    // Validate the ID and updated properties in the response\r",
                "    pm.expect(jsonData.id).to.eql(expectedId);\r",
                "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                "    pm.expect(jsonData.data.color).to.eql(expectedColor);\r",
                "});\r",
                "\r",
                "// Test to verify that the response contains the updatedAt timestamp\r",
                "pm.test(\"Response contains updatedAt timestamp\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Validate that updatedAt is present\r",
                "    pm.expect(jsonData).to.have.property('updatedAt');\r",
                "\r",
                "    // Adjusted regex to match timestamps with time zone offsets (e.g., +00:00)\r",
                "    var timestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/;\r",
                "    pm.expect(jsonData.updatedAt).to.match(timestampRegex);\r",
                "});\r",
                "\r",
                "// Test to ensure that the response does not contain any errors\r",
                "pm.test(\"Response does not contain errors\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    pm.expect(jsonData).to.not.have.property('errors');\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "3fbdee13-84d0-4beb-bb4b-e1bbb1093f1d"
            }
          }
        ]
      },
      {
        "id": "faa6077a-cee1-4e74-b9c8-1a6f03ba86a8",
        "name": "Get a Single Object Copy 2",
        "request": {
          "url": {
            "path": [
              "{{objectId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ab24549-4db3-4ac2-a54c-a27c8c91d0c2",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "125a0936-8f08-4e7d-8e1b-8256c75ac42d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5256146e-1c7a-463f-8ea6-bb7805498b4c",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test to validate the response status code\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test to verify that the response contains the correct object properties\r",
                "pm.test(\"Response contains the correct object properties\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Expected values (match the POST request body)\r",
                "    var expectedName = \"Apple example put\";\r",
                "    var expectedYear = 2019;\r",
                "    var expectedPrice = 2049.99;\r",
                "    var expectedCPUModel = \"Intel Core i9\";\r",
                "    var expectedHardDiskSize = \"1 TB\";\r",
                "\r",
                "    // Validate the object properties\r",
                "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                "});\r",
                "\r",
                "// Test to ensure the ID matches the created object\r",
                "pm.test(\"The retrieved object ID matches the saved objectId\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    var objectId = pm.environment.get(\"objectId\");\r",
                "\r",
                "    pm.expect(jsonData.id).to.eql(objectId);\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "06ef8e41-dae3-4b80-b3a6-2d30dc9a3174"
            }
          }
        ]
      },
      {
        "id": "c44cd12d-2c82-4534-9e9b-cf73fa420672",
        "name": "Patch a Single Object",
        "request": {
          "url": {
            "path": [
              "{{objectId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n   \"name\": \"Apple MacBook Pro 16 (Updated Name)\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "5783e948-2cc3-4b90-96e5-3186c356f965",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Get the object ID from the environment variable\r",
                "var expectedId = pm.environment.get(\"objectId\");\r",
                "\r",
                "// Test to validate the response status code is 200\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test to verify the response contains the correct updated properties (name updated, others unchanged)\r",
                "pm.test(\"Response contains the correct updated object properties\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Expected values\r",
                "    var updatedName = \"Apple MacBook Pro 16 (Updated Name)\";\r",
                "    var expectedYear = 2019;\r",
                "    var expectedPrice = 2049.99;\r",
                "    var expectedCPUModel = \"Intel Core i9\";\r",
                "    var expectedHardDiskSize = \"1 TB\";\r",
                "\r",
                "    // Validate the ID and updated name in the response\r",
                "    pm.expect(jsonData.id).to.eql(expectedId);\r",
                "    pm.expect(jsonData.name).to.eql(updatedName);\r",
                "\r",
                "    // Validate unchanged properties\r",
                "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                "});\r",
                "\r",
                "// Test to verify that the response contains the updatedAt timestamp\r",
                "pm.test(\"Response contains updatedAt timestamp\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Validate that updatedAt is present\r",
                "    pm.expect(jsonData).to.have.property('updatedAt');\r",
                "\r",
                "    // Adjusted regex to match timestamps with time zone offsets (e.g., +00:00) or Z\r",
                "    var timestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/;\r",
                "    pm.expect(jsonData.updatedAt).to.match(timestampRegex);\r",
                "});\r",
                "\r",
                "// Test to ensure that the response does not contain any errors\r",
                "pm.test(\"Response does not contain errors\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    pm.expect(jsonData).to.not.have.property('errors');\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "d0f980c9-058c-472b-9d30-b23972c0f99f"
            }
          }
        ]
      },
      {
        "id": "d93bc1fc-4938-4151-a63f-6c0ba47fb779",
        "name": "Get a Single Object Copy 3",
        "request": {
          "url": {
            "path": [
              "{{objectId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d773778e-058c-45f3-b2b9-487e9c090aae",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8d1a824-2fa7-497a-b066-bfa5c96efa01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a68e4493-1bdf-4330-bf16-8035210b8cb1",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test to validate the response status code\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test to verify that the response contains the correct object properties\r",
                "pm.test(\"Response contains the correct object properties\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Expected values (match the POST request body)\r",
                "    var expectedName = \"Apple MacBook Pro 16 (Updated Name)\";\r",
                "    var expectedYear = 2019;\r",
                "    var expectedPrice = 2049.99;\r",
                "    var expectedCPUModel = \"Intel Core i9\";\r",
                "    var expectedHardDiskSize = \"1 TB\";\r",
                "\r",
                "    // Validate the object properties\r",
                "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                "});\r",
                "\r",
                "// Test to ensure the ID matches the created object\r",
                "pm.test(\"The retrieved object ID matches the saved objectId\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "    var objectId = pm.environment.get(\"objectId\");\r",
                "\r",
                "    pm.expect(jsonData.id).to.eql(objectId);\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "8ecc9f67-ad84-48b8-935d-77847270d338"
            }
          }
        ]
      },
      {
        "id": "6ac3abea-22e9-4253-ae4a-ba6b5659255d",
        "name": "Delete an Object",
        "request": {
          "url": {
            "path": [
              "{{objectId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "793ba580-e1d8-4969-a85c-37e2bb319eca",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Get the object ID from the environment variable\r",
                "var objectId = pm.environment.get(\"objectId\");\r",
                "\r",
                "// Test to validate the response status code is 200\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Test to verify the response contains the correct deletion message\r",
                "pm.test(\"Response contains correct deletion message\", function () {\r",
                "    var jsonData = pm.response.json();\r",
                "\r",
                "    // Expected deletion message\r",
                "    var expectedMessage = \"Object with id = \" + objectId + \" has been deleted.\";\r",
                "\r",
                "    // Validate the deletion message in the response\r",
                "    pm.expect(jsonData.message).to.eql(expectedMessage);\r",
                "});\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "35e1e7b1-2fee-4a5e-9120-72b8d40678cb"
            }
          }
        ]
      },
      {
        "id": "ee90d8fe-4fdc-408a-aef0-7d1cb68c0f6e",
        "name": "Get a Single Object Copy",
        "request": {
          "url": {
            "path": [
              "{{objectId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21d0829a-5257-4ef2-aa04-379a46fcb6c9",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a344a00-11f8-4d87-95ff-15d6d0e581f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c882c83-cc99-4249-b277-3709dd7505fe",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Test to validate the response status code\r",
                "pm.test(\"Status code is 404\", function () {\r",
                "    pm.response.to.have.status(404);\r",
                "});\r",
                "\r",
                "\r",
                ""
              ],
              "_lastExecutionId": "b2382de3-9aea-4df3-8ac6-e6fb48bd03a4"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "9a8cd483-3dd7-4997-b9fc-f0beb812b4ee",
      "name": "CRUD",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2024-09-17T22:26:58.940Z",
      "postman_exported_using": "Postman/11.12.0"
    },
    "id": "87cc9a5c-d2aa-4f50-b1e3-50e2e95f9557",
    "name": "Test",
    "values": [
      {
        "type": "any",
        "value": "https://api.restful-api.dev/objects",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "ff80818192019ea701920219d9ff00f6",
        "key": "objectId"
      }
    ]
  },
  "globals": {
    "id": "21421e6b-6c3e-4b72-b3f9-090ad95f3d48",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 31,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 14831.7,
      "responseMin": 8003,
      "responseMax": 24001,
      "responseSd": 5823.291544307222,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1726612065229,
      "completed": 1726612214403
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3b4462fe-427d-4fa7-ba0f-9a0b4e36fbc4",
          "httpRequestId": "499f8f47-9506-4e86-a4b0-479c170d5049"
        },
        "item": {
          "id": "f4ab5d9a-56ab-4ba3-b690-ce39a18b03f3",
          "name": "Get Objects",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "3"
                },
                {
                  "key": "id",
                  "value": "5"
                },
                {
                  "key": "id",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "077ada4d-6d27-4e65-949c-03e58ef25f74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to validate the response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test to ensure the response contains exactly 3 objects\r",
                  "pm.test(\"Response contains exactly 3 objects\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length).to.eql(3);\r",
                  "});\r",
                  "\r",
                  "// Test to verify the details of object with ID 3\r",
                  "pm.test(\"Object with ID 3 has correct details\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var object = jsonData.find(obj => obj.id === \"3\");\r",
                  "    \r",
                  "    pm.expect(object.name).to.eql(\"Apple iPhone 12 Pro Max\");\r",
                  "    pm.expect(object.data.color).to.eql(\"Cloudy White\");\r",
                  "    pm.expect(object.data[\"capacity GB\"]).to.eql(512);\r",
                  "});\r",
                  "\r",
                  "// Test to verify the details of object with ID 5\r",
                  "pm.test(\"Object with ID 5 has correct details\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var object = jsonData.find(obj => obj.id === \"5\");\r",
                  "    \r",
                  "    pm.expect(object.name).to.eql(\"Samsung Galaxy Z Fold2\");\r",
                  "    pm.expect(object.data.color).to.eql(\"Brown\");\r",
                  "    pm.expect(object.data.price).to.eql(689.99);\r",
                  "});\r",
                  "\r",
                  "// Test to verify the details of object with ID 10\r",
                  "pm.test(\"Object with ID 10 has correct details\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var object = jsonData.find(obj => obj.id === \"10\");\r",
                  "    \r",
                  "    pm.expect(object.name).to.eql(\"Apple iPad Mini 5th Gen\");\r",
                  "    pm.expect(object.data.Capacity).to.eql(\"64 GB\");\r",
                  "    pm.expect(object.data[\"Screen size\"]).to.eql(7.9);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "f560a6bf-ae76-4b9c-9725-727ffff41f3b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [
              {
                "key": "id",
                "value": "3"
              },
              {
                "key": "id",
                "value": "5"
              },
              {
                "key": "id",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3f2557df-5740-4c05-b91c-a02abb5c6797",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "986fcec3-77b7-4fa6-a64b-3cda82176b1d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:28:06 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=dMl0xiTCTZmz4G9tx5vXLI7ZvRjcm%2BGef6EpKkTRyffeO4iiKXBHoeWY%2FiXHzkmpKuFJJGCqmiBYG7qSH%2B3tm3rB1ppvAmRsPFobA2wldVesrOLdgD%2B1Tz8xbg7sUMfb56lf5%2Fp1\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c86822e9e1acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              105,
              80,
              104,
              111,
              110,
              101,
              32,
              49,
              50,
              32,
              80,
              114,
              111,
              32,
              77,
              97,
              120,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              67,
              108,
              111,
              117,
              100,
              121,
              32,
              87,
              104,
              105,
              116,
              101,
              34,
              44,
              34,
              99,
              97,
              112,
              97,
              99,
              105,
              116,
              121,
              32,
              71,
              66,
              34,
              58,
              53,
              49,
              50,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              109,
              115,
              117,
              110,
              103,
              32,
              71,
              97,
              108,
              97,
              120,
              121,
              32,
              90,
              32,
              70,
              111,
              108,
              100,
              50,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              54,
              56,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              66,
              114,
              111,
              119,
              110,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              105,
              80,
              97,
              100,
              32,
              77,
              105,
              110,
              105,
              32,
              53,
              116,
              104,
              32,
              71,
              101,
              110,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              67,
              97,
              112,
              97,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              54,
              52,
              32,
              71,
              66,
              34,
              44,
              34,
              83,
              99,
              114,
              101,
              101,
              110,
              32,
              115,
              105,
              122,
              101,
              34,
              58,
              55,
              46,
              57,
              125,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 21753,
          "responseSize": 269
        },
        "id": "f4ab5d9a-56ab-4ba3-b690-ce39a18b03f3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains exactly 3 objects",
            "skipped": false
          },
          {
            "assertion": "Object with ID 3 has correct details",
            "skipped": false
          },
          {
            "assertion": "Object with ID 5 has correct details",
            "skipped": false
          },
          {
            "assertion": "Object with ID 10 has correct details",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d7cbe299-88cd-4dbf-b9fa-69b5abe90e86",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6d207436-febe-4848-addd-bbd922a265e2"
        },
        "item": {
          "id": "99dfe5f3-3887-41c7-ada0-ff9cb52d121d",
          "name": "Get a Single Object",
          "request": {
            "url": {
              "path": [
                "7"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d6986f8e-1d22-41b3-8ac3-18e1f0bba674",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "047f73b0-9d36-40b5-904f-f717b87dc1ab"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ccf391a0-4637-4836-a4e5-29fd5441c744",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to validate the response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test to verify the details of the object with ID \"7\"\r",
                  "pm.test(\"Response contains the object with ID {{ObjectId}}\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    \r",
                  "    // Expected values\r",
                  "    var expectedName = \"Apple MacBook Pro 16\";\r",
                  "    var expectedYear = 2019;\r",
                  "    var expectedPrice = 1849.99;\r",
                  "    var expectedCPUModel = \"Intel Core i9\";\r",
                  "    var expectedHardDiskSize = \"1 TB\";\r",
                  "    \r",
                  "    // Validate the object properties\r",
                  "    pm.expect(jsonData.id).to.eql(\"7\"); // Replace with the actual ObjectId if not dynamic\r",
                  "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                  "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                  "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                  "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                  "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "7f08e977-e2cf-435c-80be-23d8da4c374a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects",
              "7"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3cf56f1e-ae30-4fcb-9bf5-d767940a7e60",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ec09b83b-39cd-494c-afc9-1c1d2383f617",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:28:16 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=vwykielFcao5RomJJpetmcb0f%2FwK0s4%2BVTW27ryIdeOk53k1WiYCe0A5fW8OMsfy0szS%2FiWycecHQI76GHRSanvTrV9VtzcHn2jM53xQAkVk29AEdhsILZgTfXt90%2F9OV%2BixCHAl\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c87089be41acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              55,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              77,
              97,
              99,
              66,
              111,
              111,
              107,
              32,
              80,
              114,
              111,
              32,
              49,
              54,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              49,
              57,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              56,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              67,
              80,
              85,
              32,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              73,
              110,
              116,
              101,
              108,
              32,
              67,
              111,
              114,
              101,
              32,
              105,
              57,
              34,
              44,
              34,
              72,
              97,
              114,
              100,
              32,
              100,
              105,
              115,
              107,
              32,
              115,
              105,
              122,
              101,
              34,
              58,
              34,
              49,
              32,
              84,
              66,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9025,
          "responseSize": 129
        },
        "id": "99dfe5f3-3887-41c7-ada0-ff9cb52d121d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains the object with ID {{ObjectId}}",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c44d079c-44cf-490f-a51f-d7f7438a7ab6",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e73193cf-dffa-4773-98d2-7c628fc908d6"
        },
        "item": {
          "id": "0daf4923-42cf-4d5b-b55f-13ff8db779ac",
          "name": "Post an Object",
          "request": {
            "url": {
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"name\": \"Apple example\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 1849.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\"\r\n   }\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3cf8b5e7-5f28-4767-9b78-2a9025dbf8b3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to validate the response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test to verify that the response contains the expected properties for the newly created object\r",
                  "pm.test(\"Response contains the correct object properties\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Expected values\r",
                  "    var expectedName = \"Apple example\";\r",
                  "    var expectedYear = 2019;\r",
                  "    var expectedPrice = 1849.99;\r",
                  "    var expectedCPUModel = \"Intel Core i9\";\r",
                  "    var expectedHardDiskSize = \"1 TB\";\r",
                  "\r",
                  "    // Validate the main properties in the response\r",
                  "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                  "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                  "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                  "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                  "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                  "});\r",
                  "\r",
                  "// Test to verify that the response contains additional properties like autogenerated ID and createdAt timestamp\r",
                  "pm.test(\"Response contains autogenerated ID and timestamp\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Validate that an ID and createdAt timestamp are present\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData).to.have.property('createdAt');\r",
                  "\r",
                  "    // Save the ID to an environment variable\r",
                  "    pm.environment.set(\"objectId\", jsonData.id);\r",
                  "\r",
                  "    // Ensure the ID is not null or empty (Autogenerated)\r",
                  "    pm.expect(jsonData.id).to.not.be.null;\r",
                  "    pm.expect(jsonData.id).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "// Test to ensure that the response does not contain any errors\r",
                  "pm.test(\"Response does not contain errors\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('errors');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "1bd0dd7e-d0d2-4cc7-aa0d-86f5dcf94c0c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c22a9b4e-a412-4895-a300-e5a5a713e2a4",
                "type": "text/javascript",
                "packages": {},
                "_lastExecutionId": "a9bfdfe5-fee0-405b-aa8a-c1e2c68f3084"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2d1e853a-a7e9-4182-96cd-9faa58cc73b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "168",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n   \"name\": \"Apple example\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 1849.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\"\r\n   }\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c12d6bf5-06a6-4be0-8d8b-620cf0b70db1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:28:24 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=Xe2Py7NpSnyZ6GCg2YslSeuPIhJMYy8GmqNJ8kzPGXrZJdSwZ0FJR3cQDi8g%2BboDpr4R5dUjpZa5my7GfVejn3sMWwp1Y7D37u3p7df39EZ53Jl3Wt9TqC5%2Fqr%2FOqrAEKYzcGSNr\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c874189031acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              102,
              56,
              48,
              56,
              49,
              56,
              49,
              57,
              50,
              48,
              49,
              57,
              101,
              97,
              55,
              48,
              49,
              57,
              50,
              48,
              50,
              49,
              57,
              100,
              57,
              102,
              102,
              48,
              48,
              102,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              57,
              45,
              49,
              55,
              84,
              50,
              50,
              58,
              50,
              56,
              58,
              50,
              49,
              46,
              54,
              52,
              56,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              49,
              57,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              56,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              67,
              80,
              85,
              32,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              73,
              110,
              116,
              101,
              108,
              32,
              67,
              111,
              114,
              101,
              32,
              105,
              57,
              34,
              44,
              34,
              72,
              97,
              114,
              100,
              32,
              100,
              105,
              115,
              107,
              32,
              115,
              105,
              122,
              101,
              34,
              58,
              34,
              49,
              32,
              84,
              66,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8430,
          "responseSize": 197
        },
        "id": "0daf4923-42cf-4d5b-b55f-13ff8db779ac",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains the correct object properties",
            "skipped": false
          },
          {
            "assertion": "Response contains autogenerated ID and timestamp",
            "skipped": false
          },
          {
            "assertion": "Response does not contain errors",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "75071a37-6112-4697-8cd2-0509ea50c735",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "287959f8-1591-41b2-b1cb-089a42020031"
        },
        "item": {
          "id": "f1e1718b-137a-46fe-a495-5d396216c5cc",
          "name": "Get a Single Object Copy",
          "request": {
            "url": {
              "path": [
                "{{objectId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d154df45-f07e-466d-b4a0-53d5fdf46909",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a99bdc7e-87ce-478f-9508-4c12b99b2e07"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ed3ba61e-3d45-4445-8532-8d52ff776c4a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to validate the response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test to verify that the response contains the correct object properties\r",
                  "pm.test(\"Response contains the correct object properties\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Expected values (match the POST request body)\r",
                  "    var expectedName = \"Apple example\";\r",
                  "    var expectedYear = 2019;\r",
                  "    var expectedPrice = 1849.99;\r",
                  "    var expectedCPUModel = \"Intel Core i9\";\r",
                  "    var expectedHardDiskSize = \"1 TB\";\r",
                  "\r",
                  "    // Validate the object properties\r",
                  "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                  "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                  "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                  "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                  "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                  "});\r",
                  "\r",
                  "// Test to ensure the ID matches the created object\r",
                  "pm.test(\"The retrieved object ID matches the saved objectId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var objectId = pm.environment.get(\"objectId\");\r",
                  "\r",
                  "    pm.expect(jsonData.id).to.eql(objectId);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "4fd40324-ca35-4a6d-8e5d-49bee6988309"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects",
              "ff80818192019ea701920219d9ff00f6"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c0cfaa19-1ff4-4a07-8ad3-88a651cc5559",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8edffe42-60dd-4c13-b852-f079e764bb8e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:28:40 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=dorxfFQnsYfAoQnIS2KloLWtHjWEURQX1%2Fp4CH2QGeYVtgLoO5Lwy%2FQ3tYcY9DvNyk7iMgO%2F0jMBKk1VovZLk7BU8ZSBfdKsUbH9MGcs6bnfI9Hfx1%2BRP2%2FJdCfSu0PEtZMYeNAV\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c8776d8701acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              102,
              56,
              48,
              56,
              49,
              56,
              49,
              57,
              50,
              48,
              49,
              57,
              101,
              97,
              55,
              48,
              49,
              57,
              50,
              48,
              50,
              49,
              57,
              100,
              57,
              102,
              102,
              48,
              48,
              102,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              49,
              57,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              56,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              67,
              80,
              85,
              32,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              73,
              110,
              116,
              101,
              108,
              32,
              67,
              111,
              114,
              101,
              32,
              105,
              57,
              34,
              44,
              34,
              72,
              97,
              114,
              100,
              32,
              100,
              105,
              115,
              107,
              32,
              115,
              105,
              122,
              101,
              34,
              58,
              34,
              49,
              32,
              84,
              66,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15986,
          "responseSize": 153
        },
        "id": "f1e1718b-137a-46fe-a495-5d396216c5cc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains the correct object properties",
            "skipped": false
          },
          {
            "assertion": "The retrieved object ID matches the saved objectId",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "388af795-01f3-4e19-a435-af79cbc04c85",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cfa3e29a-a668-48c3-bf83-2243a5f94678"
        },
        "item": {
          "id": "252867f8-77e8-4238-81dd-bb9f0d91d898",
          "name": "Put of an Object",
          "request": {
            "url": {
              "path": [
                "{{objectId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"name\": \"Apple example put\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 2049.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\",\r\n      \"color\": \"silver\"\r\n   }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d560198f-bde1-472f-871f-da1ef1b637ae",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Get the object ID from the environment variable\r",
                  "var expectedId = pm.environment.get(\"objectId\");\r",
                  "\r",
                  "// Test to validate the response status code is 200\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test to verify that the response contains the correct object properties after the update\r",
                  "pm.test(\"Response contains the correct updated object properties\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Expected updated values\r",
                  "    var expectedName = \"Apple example put\";\r",
                  "    var expectedYear = 2019;\r",
                  "    var expectedPrice = 2049.99;\r",
                  "    var expectedCPUModel = \"Intel Core i9\";\r",
                  "    var expectedHardDiskSize = \"1 TB\";\r",
                  "    var expectedColor = \"silver\";\r",
                  "\r",
                  "    // Validate the ID and updated properties in the response\r",
                  "    pm.expect(jsonData.id).to.eql(expectedId);\r",
                  "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                  "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                  "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                  "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                  "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                  "    pm.expect(jsonData.data.color).to.eql(expectedColor);\r",
                  "});\r",
                  "\r",
                  "// Test to verify that the response contains the updatedAt timestamp\r",
                  "pm.test(\"Response contains updatedAt timestamp\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Validate that updatedAt is present\r",
                  "    pm.expect(jsonData).to.have.property('updatedAt');\r",
                  "\r",
                  "    // Adjusted regex to match timestamps with time zone offsets (e.g., +00:00)\r",
                  "    var timestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/;\r",
                  "    pm.expect(jsonData.updatedAt).to.match(timestampRegex);\r",
                  "});\r",
                  "\r",
                  "// Test to ensure that the response does not contain any errors\r",
                  "pm.test(\"Response does not contain errors\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('errors');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3fbdee13-84d0-4beb-bb4b-e1bbb1093f1d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects",
              "ff80818192019ea701920219d9ff00f6"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8ff4abc0-10af-4c8d-bcae-6c10f4a23f4e",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "200",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n   \"name\": \"Apple example put\",\r\n   \"data\": {\r\n      \"year\": 2019,\r\n      \"price\": 2049.99,\r\n      \"CPU model\": \"Intel Core i9\",\r\n      \"Hard disk size\": \"1 TB\",\r\n      \"color\": \"silver\"\r\n   }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "3d3ed1c9-5d51-4025-8b8e-5e086029e006",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:28:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=1PBgCVYHd0sLge9T0qTHzqm1SO6ZKMqgnORYuyrd9AtIMaMKr0hwviKF8YcPGUz25HIsr7EJXpIG1%2Bnz3DBTeiYnl35m1HnuB4RmcMKjfzEmM2P00svXyYQSh64zhysyZ1n0irlV\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c87db58701acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              102,
              56,
              48,
              56,
              49,
              56,
              49,
              57,
              50,
              48,
              49,
              57,
              101,
              97,
              55,
              48,
              49,
              57,
              50,
              48,
              50,
              49,
              57,
              100,
              57,
              102,
              102,
              48,
              48,
              102,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              112,
              117,
              116,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              57,
              45,
              49,
              55,
              84,
              50,
              50,
              58,
              50,
              56,
              58,
              53,
              49,
              46,
              53,
              51,
              56,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              49,
              57,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              48,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              67,
              80,
              85,
              32,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              73,
              110,
              116,
              101,
              108,
              32,
              67,
              111,
              114,
              101,
              32,
              105,
              57,
              34,
              44,
              34,
              72,
              97,
              114,
              100,
              32,
              100,
              105,
              115,
              107,
              32,
              115,
              105,
              122,
              101,
              34,
              58,
              34,
              49,
              32,
              84,
              66,
              34,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              115,
              105,
              108,
              118,
              101,
              114,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18999,
          "responseSize": 218
        },
        "id": "252867f8-77e8-4238-81dd-bb9f0d91d898",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains the correct updated object properties",
            "skipped": false
          },
          {
            "assertion": "Response contains updatedAt timestamp",
            "skipped": false
          },
          {
            "assertion": "Response does not contain errors",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4fc43e7b-8fa0-4379-ac4c-985c5d49f395",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bff5bb15-b4eb-43e9-a438-91b04cd1b0b7"
        },
        "item": {
          "id": "faa6077a-cee1-4e74-b9c8-1a6f03ba86a8",
          "name": "Get a Single Object Copy 2",
          "request": {
            "url": {
              "path": [
                "{{objectId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9ab24549-4db3-4ac2-a54c-a27c8c91d0c2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "125a0936-8f08-4e7d-8e1b-8256c75ac42d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5256146e-1c7a-463f-8ea6-bb7805498b4c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to validate the response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test to verify that the response contains the correct object properties\r",
                  "pm.test(\"Response contains the correct object properties\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Expected values (match the POST request body)\r",
                  "    var expectedName = \"Apple example put\";\r",
                  "    var expectedYear = 2019;\r",
                  "    var expectedPrice = 2049.99;\r",
                  "    var expectedCPUModel = \"Intel Core i9\";\r",
                  "    var expectedHardDiskSize = \"1 TB\";\r",
                  "\r",
                  "    // Validate the object properties\r",
                  "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                  "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                  "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                  "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                  "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                  "});\r",
                  "\r",
                  "// Test to ensure the ID matches the created object\r",
                  "pm.test(\"The retrieved object ID matches the saved objectId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var objectId = pm.environment.get(\"objectId\");\r",
                  "\r",
                  "    pm.expect(jsonData.id).to.eql(objectId);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "06ef8e41-dae3-4b80-b3a6-2d30dc9a3174"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects",
              "ff80818192019ea701920219d9ff00f6"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9bec0b94-c8e0-463d-ab2e-dd589230bf8c",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "beb174c8-5d77-4f56-ab48-20e3e0702634",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:29:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=tJn%2F9kAEwu3mF5vZIcT8UjQ0vfh1tM3Ss8%2FGaGDSWfRS2JuoaZEWYZ7rzb%2FI0k4vzHV5tx98kOwKqSpldgXsD0m20Wqm63G5Wv9l%2FVFRJOzkFoDn1t3Fr6qiiY1zw%2B8RGPG%2BHFfZ\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c8852987b1acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              102,
              56,
              48,
              56,
              49,
              56,
              49,
              57,
              50,
              48,
              49,
              57,
              101,
              97,
              55,
              48,
              49,
              57,
              50,
              48,
              50,
              49,
              57,
              100,
              57,
              102,
              102,
              48,
              48,
              102,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              112,
              117,
              116,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              49,
              57,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              48,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              67,
              80,
              85,
              32,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              73,
              110,
              116,
              101,
              108,
              32,
              67,
              111,
              114,
              101,
              32,
              105,
              57,
              34,
              44,
              34,
              72,
              97,
              114,
              100,
              32,
              100,
              105,
              115,
              107,
              32,
              115,
              105,
              122,
              101,
              34,
              58,
              34,
              49,
              32,
              84,
              66,
              34,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              115,
              105,
              108,
              118,
              101,
              114,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8003,
          "responseSize": 174
        },
        "id": "faa6077a-cee1-4e74-b9c8-1a6f03ba86a8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains the correct object properties",
            "skipped": false
          },
          {
            "assertion": "The retrieved object ID matches the saved objectId",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "278c765b-7789-4727-98bb-fff27c03b4b1",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b1d467bb-8c60-4444-963b-1d8910253b1e"
        },
        "item": {
          "id": "c44cd12d-2c82-4534-9e9b-cf73fa420672",
          "name": "Patch a Single Object",
          "request": {
            "url": {
              "path": [
                "{{objectId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"name\": \"Apple MacBook Pro 16 (Updated Name)\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5783e948-2cc3-4b90-96e5-3186c356f965",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Get the object ID from the environment variable\r",
                  "var expectedId = pm.environment.get(\"objectId\");\r",
                  "\r",
                  "// Test to validate the response status code is 200\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test to verify the response contains the correct updated properties (name updated, others unchanged)\r",
                  "pm.test(\"Response contains the correct updated object properties\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Expected values\r",
                  "    var updatedName = \"Apple MacBook Pro 16 (Updated Name)\";\r",
                  "    var expectedYear = 2019;\r",
                  "    var expectedPrice = 2049.99;\r",
                  "    var expectedCPUModel = \"Intel Core i9\";\r",
                  "    var expectedHardDiskSize = \"1 TB\";\r",
                  "\r",
                  "    // Validate the ID and updated name in the response\r",
                  "    pm.expect(jsonData.id).to.eql(expectedId);\r",
                  "    pm.expect(jsonData.name).to.eql(updatedName);\r",
                  "\r",
                  "    // Validate unchanged properties\r",
                  "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                  "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                  "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                  "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                  "});\r",
                  "\r",
                  "// Test to verify that the response contains the updatedAt timestamp\r",
                  "pm.test(\"Response contains updatedAt timestamp\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Validate that updatedAt is present\r",
                  "    pm.expect(jsonData).to.have.property('updatedAt');\r",
                  "\r",
                  "    // Adjusted regex to match timestamps with time zone offsets (e.g., +00:00) or Z\r",
                  "    var timestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(.\\d{3})?([+-]\\d{2}:\\d{2}|Z)$/;\r",
                  "    pm.expect(jsonData.updatedAt).to.match(timestampRegex);\r",
                  "});\r",
                  "\r",
                  "// Test to ensure that the response does not contain any errors\r",
                  "pm.test(\"Response does not contain errors\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.not.have.property('errors');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d0f980c9-058c-472b-9d30-b23972c0f99f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects",
              "ff80818192019ea701920219d9ff00f6"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "07bdd6f7-d1f4-41dc-b4a5-f8a12d574c5a",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "54",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n   \"name\": \"Apple MacBook Pro 16 (Updated Name)\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "daa67395-44d8-4536-bd4f-d5251543737e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:29:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=1lBNtrmWqcqATd1J%2BZhPIsB%2B2YzAX14g1vdltplmN%2Bibg8ol5RjqBzJA9l9k9MdEH0gN2rxJSP4INZB4RFRVwZWuz1RpTThFoSeTnAgIYxxPisx%2FEP1L91u0Jxe2FzxI2st7eonU\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c88851ff31acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              102,
              56,
              48,
              56,
              49,
              56,
              49,
              57,
              50,
              48,
              49,
              57,
              101,
              97,
              55,
              48,
              49,
              57,
              50,
              48,
              50,
              49,
              57,
              100,
              57,
              102,
              102,
              48,
              48,
              102,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              77,
              97,
              99,
              66,
              111,
              111,
              107,
              32,
              80,
              114,
              111,
              32,
              49,
              54,
              32,
              40,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              78,
              97,
              109,
              101,
              41,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              57,
              45,
              49,
              55,
              84,
              50,
              50,
              58,
              50,
              57,
              58,
              50,
              53,
              46,
              54,
              49,
              52,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              49,
              57,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              48,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              67,
              80,
              85,
              32,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              73,
              110,
              116,
              101,
              108,
              32,
              67,
              111,
              114,
              101,
              32,
              105,
              57,
              34,
              44,
              34,
              72,
              97,
              114,
              100,
              32,
              100,
              105,
              115,
              107,
              32,
              115,
              105,
              122,
              101,
              34,
              58,
              34,
              49,
              32,
              84,
              66,
              34,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              115,
              105,
              108,
              118,
              101,
              114,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24001,
          "responseSize": 236
        },
        "id": "c44cd12d-2c82-4534-9e9b-cf73fa420672",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains the correct updated object properties",
            "skipped": false
          },
          {
            "assertion": "Response contains updatedAt timestamp",
            "skipped": false
          },
          {
            "assertion": "Response does not contain errors",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f18f4bf7-fb69-4175-990a-36c544ca0dd9",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "aa4da5aa-7cc3-4f0b-93a9-5ccd6d1ced4b"
        },
        "item": {
          "id": "d93bc1fc-4938-4151-a63f-6c0ba47fb779",
          "name": "Get a Single Object Copy 3",
          "request": {
            "url": {
              "path": [
                "{{objectId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d773778e-058c-45f3-b2b9-487e9c090aae",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e8d1a824-2fa7-497a-b066-bfa5c96efa01"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a68e4493-1bdf-4330-bf16-8035210b8cb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to validate the response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test to verify that the response contains the correct object properties\r",
                  "pm.test(\"Response contains the correct object properties\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Expected values (match the POST request body)\r",
                  "    var expectedName = \"Apple MacBook Pro 16 (Updated Name)\";\r",
                  "    var expectedYear = 2019;\r",
                  "    var expectedPrice = 2049.99;\r",
                  "    var expectedCPUModel = \"Intel Core i9\";\r",
                  "    var expectedHardDiskSize = \"1 TB\";\r",
                  "\r",
                  "    // Validate the object properties\r",
                  "    pm.expect(jsonData.name).to.eql(expectedName);\r",
                  "    pm.expect(jsonData.data.year).to.eql(expectedYear);\r",
                  "    pm.expect(jsonData.data.price).to.eql(expectedPrice);\r",
                  "    pm.expect(jsonData.data[\"CPU model\"]).to.eql(expectedCPUModel);\r",
                  "    pm.expect(jsonData.data[\"Hard disk size\"]).to.eql(expectedHardDiskSize);\r",
                  "});\r",
                  "\r",
                  "// Test to ensure the ID matches the created object\r",
                  "pm.test(\"The retrieved object ID matches the saved objectId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    var objectId = pm.environment.get(\"objectId\");\r",
                  "\r",
                  "    pm.expect(jsonData.id).to.eql(objectId);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "8ecc9f67-ad84-48b8-935d-77847270d338"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects",
              "ff80818192019ea701920219d9ff00f6"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "80c002ec-d0b4-4b74-84cd-e7f9544d7c74",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2db8920c-24d2-49dc-93e2-2936c88c5438",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:29:41 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=qnZDNL5ymx%2Fe2hiAKS46WNN%2Bi7wGvAh23e2p%2B51qdgsSlZz5Q5LOISuxiZjM%2Bwk9ros8HFeNCGuhKRUjEkwbbHapSs7X0ma%2BkZjWMPn4P9q4HzbpweIfMC3zKxt5V2FNrQOcCUBW\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c891bace01acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              102,
              56,
              48,
              56,
              49,
              56,
              49,
              57,
              50,
              48,
              49,
              57,
              101,
              97,
              55,
              48,
              49,
              57,
              50,
              48,
              50,
              49,
              57,
              100,
              57,
              102,
              102,
              48,
              48,
              102,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              77,
              97,
              99,
              66,
              111,
              111,
              107,
              32,
              80,
              114,
              111,
              32,
              49,
              54,
              32,
              40,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              78,
              97,
              109,
              101,
              41,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              49,
              57,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              48,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              67,
              80,
              85,
              32,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              73,
              110,
              116,
              101,
              108,
              32,
              67,
              111,
              114,
              101,
              32,
              105,
              57,
              34,
              44,
              34,
              72,
              97,
              114,
              100,
              32,
              100,
              105,
              115,
              107,
              32,
              115,
              105,
              122,
              101,
              34,
              58,
              34,
              49,
              32,
              84,
              66,
              34,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              115,
              105,
              108,
              118,
              101,
              114,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9276,
          "responseSize": 192
        },
        "id": "d93bc1fc-4938-4151-a63f-6c0ba47fb779",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains the correct object properties",
            "skipped": false
          },
          {
            "assertion": "The retrieved object ID matches the saved objectId",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "927b9610-7dc4-43a6-bb2e-e2ea231f2f2e",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9d974516-9d36-4ff1-8dba-30aefe5bf2c2"
        },
        "item": {
          "id": "6ac3abea-22e9-4253-ae4a-ba6b5659255d",
          "name": "Delete an Object",
          "request": {
            "url": {
              "path": [
                "{{objectId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "793ba580-e1d8-4969-a85c-37e2bb319eca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Get the object ID from the environment variable\r",
                  "var objectId = pm.environment.get(\"objectId\");\r",
                  "\r",
                  "// Test to validate the response status code is 200\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test to verify the response contains the correct deletion message\r",
                  "pm.test(\"Response contains correct deletion message\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    // Expected deletion message\r",
                  "    var expectedMessage = \"Object with id = \" + objectId + \" has been deleted.\";\r",
                  "\r",
                  "    // Validate the deletion message in the response\r",
                  "    pm.expect(jsonData.message).to.eql(expectedMessage);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "35e1e7b1-2fee-4a5e-9120-72b8d40678cb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects",
              "ff80818192019ea701920219d9ff00f6"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6a2f461d-ac04-4c03-95c0-71bb143b5604",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "425a9585-292b-4cd0-bd55-f7224c7397a3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:30:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=Xm1Dnl6D1Nb4Zs22SxNMcE6ZfgZbK4BJLvCmYDQQ128t9CxN9KKSPFdQz8eIzv2Xl%2FUehM8ZUKjlEluyAlPzFczphHnqHNHUKDJqKLHciHTvq9l8ykh1HmaHOEjWWjBOANJ6DEoL\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c89562b6b1acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              98,
              106,
              101,
              99,
              116,
              32,
              119,
              105,
              116,
              104,
              32,
              105,
              100,
              32,
              61,
              32,
              102,
              102,
              56,
              48,
              56,
              49,
              56,
              49,
              57,
              50,
              48,
              49,
              57,
              101,
              97,
              55,
              48,
              49,
              57,
              50,
              48,
              50,
              49,
              57,
              100,
              57,
              102,
              102,
              48,
              48,
              102,
              54,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 20370,
          "responseSize": 81
        },
        "id": "6ac3abea-22e9-4253-ae4a-ba6b5659255d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains correct deletion message",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1309be90-bb96-45ea-86a0-b03f48cfd4ba",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9b28e0fa-f4f2-4f34-bbf3-9164d08d7a27"
        },
        "item": {
          "id": "ee90d8fe-4fdc-408a-aef0-7d1cb68c0f6e",
          "name": "Get a Single Object Copy",
          "request": {
            "url": {
              "path": [
                "{{objectId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "21d0829a-5257-4ef2-aa04-379a46fcb6c9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "3a344a00-11f8-4d87-95ff-15d6d0e581f2"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2c882c83-cc99-4249-b277-3709dd7505fe",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test to validate the response status code\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "b2382de3-9aea-4df3-8ac6-e6fb48bd03a4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "objects",
              "ff80818192019ea701920219d9ff00f6"
            ],
            "host": [
              "api",
              "restful-api",
              "dev"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bb0b7508-6a1c-482e-ae4a-cae4066ddeab",
              "system": true
            },
            {
              "key": "Host",
              "value": "api.restful-api.dev",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "490bdd91-a5bb-4e8c-964a-06e4f2c06cc3",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 17 Sep 2024 22:30:14 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=%2FRf5Ml0%2FpzhUW%2F%2BdG1EpMTfAZCfWB0%2BL43VHiQNZ02CYz0VFHd9UgB5luyaUViPdTo7J041SVHBfTfzrbQ%2FveE5ZdgX2puehhn4MyIyO75rSXOqQIiXmuGpcDe0fCm7NqkZZmI6v\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "8c4c89d60fc01acd-GRU"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              79,
              106,
              101,
              99,
              116,
              32,
              119,
              105,
              116,
              104,
              32,
              105,
              100,
              61,
              102,
              102,
              56,
              48,
              56,
              49,
              56,
              49,
              57,
              50,
              48,
              49,
              57,
              101,
              97,
              55,
              48,
              49,
              57,
              50,
              48,
              50,
              49,
              57,
              100,
              57,
              102,
              102,
              48,
              48,
              102,
              54,
              32,
              119,
              97,
              115,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12474,
          "responseSize": 73
        },
        "id": "ee90d8fe-4fdc-408a-aef0-7d1cb68c0f6e",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1722
    },
    "failures": [],
    "error": null
  }
}